const io = require('socket.io-client');

// Configura√ß√£o do teste
const BACKEND_URL = 'https://ialogus-backend-deploy.onrender.com';
const AUTH_TOKEN = 'ialogus:token'; // Token de teste

console.log('üß™ Testando conex√£o WebSocket...');
console.log('üåê URL:', BACKEND_URL);
console.log('üîë Token:', AUTH_TOKEN);

// Criar conex√£o
const socket = io(BACKEND_URL, {
  auth: {
    token: AUTH_TOKEN
  },
  query: {
    token: AUTH_TOKEN
  },
  extraHeaders: {
    'Authorization': `Bearer ${AUTH_TOKEN}`
  },
  timeout: 20000,
  forceNew: true,
  transports: ['websocket', 'polling'],
  upgrade: true,
  rememberUpgrade: false,
  autoConnect: true,
  reconnection: true,
  reconnectionAttempts: 5,
  reconnectionDelay: 1000
});

// Event listeners
socket.on('connect', () => {
  console.log('‚úÖ Conectado com sucesso!');
  console.log('üÜî Socket ID:', socket.id);
  console.log('üöÄ Transport:', socket.io.engine.transport.name);
});

socket.on('disconnect', (reason, details) => {
  console.log('‚ùå Desconectado. Motivo:', reason);
  console.log('üìã Detalhes:', details);
});

socket.on('connect_error', (error) => {
  console.error('üö® Erro de conex√£o:', error.message);
});

socket.on('authenticated', () => {
  console.log('üîê Autenticado com sucesso!');
});

socket.on('unauthorized', (error) => {
  console.error('üîí Falha na autentica√ß√£o:', error);
});

// Escutar todos os eventos
socket.onAny((eventName, ...args) => {
  console.log('üéØ Evento recebido:', eventName, 'com dados:', args);
});

// Escutar especificamente o evento new-message
socket.on('new-message', (data) => {
  console.log('üí¨ Nova mensagem recebida:', data);
});

// Manter o script rodando
setTimeout(() => {
  console.log('‚è∞ Teste finalizado ap√≥s 30 segundos');
  socket.disconnect();
  process.exit(0);
}, 30000);

console.log('‚è≥ Aguardando conex√£o por 30 segundos...'); 