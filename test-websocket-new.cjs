const io = require('socket.io-client');

// Configura√ß√£o do teste
const BACKEND_URL = 'https://ialogus-backend-deploy.onrender.com/chat';
const AUTH_TOKEN = 'ialogus:token'; // Token de teste

console.log('üß™ Testando nova implementa√ß√£o WebSocket...');
console.log('üåê URL:', BACKEND_URL);
console.log('üîë Token:', AUTH_TOKEN);

// Criar conex√£o com nova configura√ß√£o
const socket = io(BACKEND_URL, {
  auth: {
    token: AUTH_TOKEN
  },
  transports: ['websocket'],
  autoConnect: true,
  timeout: 20000,
  forceNew: true,
  reconnection: true,
  reconnectionAttempts: 5,
  reconnectionDelay: 1000
});

// Event listeners para novos eventos
socket.on('connect', () => {
  console.log('‚úÖ Conectado com sucesso!');
  console.log('üÜî Socket ID:', socket.id);
  console.log('üöÄ Transport:', socket.io.engine.transport.name);
});

socket.on('connection-established', (data) => {
  console.log('üîê Conex√£o autenticada estabelecida:', data);
  
  // Testar entrada em sala de chat ap√≥s autentica√ß√£o
  setTimeout(() => {
    console.log('üß™ Testando entrada em sala de chat...');
    socket.emit('join-chat-room', { chatLogId: 'test-chat-123' });
  }, 1000);
});

socket.on('joined-chat-room', (data) => {
  console.log('üè† Entrou na sala de chat:', data);
  
  // Testar envio de mensagem ap√≥s entrar na sala
  setTimeout(() => {
    console.log('üß™ Testando envio de mensagem...');
    socket.emit('send-message', {
      chatLogId: 'test-chat-123',
      content: 'Mensagem de teste via WebSocket - ' + new Date().toLocaleTimeString()
    });
  }, 1000);
});

socket.on('message-sent', (data) => {
  console.log('‚úÖ Confirma√ß√£o de mensagem enviada:', data);
  
  // Testar sa√≠da da sala ap√≥s enviar mensagem
  setTimeout(() => {
    console.log('üß™ Testando sa√≠da da sala...');
    socket.emit('leave-chat-room', { chatLogId: 'test-chat-123' });
  }, 1000);
});

socket.on('left-chat-room', (data) => {
  console.log('üö™ Saiu da sala de chat:', data);
});

socket.on('new-message', (data) => {
  console.log('üîî Nova mensagem recebida:', data);
});

socket.on('disconnect', (reason, details) => {
  console.log('‚ùå Desconectado. Motivo:', reason);
  console.log('üìã Detalhes:', details);
});

socket.on('connect_error', (error) => {
  console.error('üö® Erro de conex√£o:', error.message);
});

socket.on('unauthorized', (error) => {
  console.error('üîí Falha na autentica√ß√£o:', error);
});

socket.on('error', (error) => {
  console.error('‚ùå Erro WebSocket:', error);
});

// Escutar todos os eventos
socket.onAny((eventName, ...args) => {
  console.log('üéØ Evento recebido:', eventName, 'com dados:', args);
});

// Manter o script rodando
setTimeout(() => {
  console.log('‚è∞ Teste finalizado ap√≥s 30 segundos');
  socket.disconnect();
  process.exit(0);
}, 30000);

console.log('‚è≥ Aguardando conex√£o e testando funcionalidades por 30 segundos...'); 